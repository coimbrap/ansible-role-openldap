- name: overlay | check directory
  block:
    - name: overlay | search directory for unique overlay
      shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=config olcOverlay=unique"
      register: unique_overlay
      when: "'unique' in overlays"

    - name: overlay | search directory for memberOf overlay
      shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=config olcOverlay=memberof"
      register: memberof_overlay
      when: "'memberof' in overlays"

    - name: overlay | search directory for refint overlay
      shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=config olcOverlay=refint"
      register: refint_overlay
      when: "'refint' in overlays"

    - name: overlay | search directory for auditlog overlay
      shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=config olcOverlay=auditlog"
      register: auditlog_overlay
      when: "'auditlog' in overlays"

    - name: overlay | search directory for ppolicy overlay
      shell: "ldapsearch -QLLLY EXTERNAL -H ldapi:/// -b cn=config olcOverlay=ppolicy"
      register: ppolicy_overlay
      when: "'ppolicy' in overlays"
  when: not (rewrite_ldap or install_ldap)|bool


- name: overlay | unique
  block:
    - name: overlay | render template unique-overlay.ldif
      template:
        src: "{{ overlay_path }}/unique.ldif.j2"
        dest: "{{ tmp_dir }}/unique-overlay.ldif"
    - name: overlay | add unique overlay
      command: "ldapadd -Q -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/unique-overlay.ldif"
  when: (rewrite_ldap or install_ldap or (unique is defined and unique_overlay.stdout == "")| default(False))

- name: overlay | memberof
  block:
    - name: overlay | render template memberof-overlay.ldif
      template:
        src: "{{ overlay_path }}/memberof.ldif.j2"
        dest: "{{ tmp_dir }}/memberof-overlay.ldif"
    - name: overlay | add memberOf overlay to openldap
      command: "ldapadd -Q -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/memberof-overlay.ldif"
  when: (rewrite_ldap or install_ldap or (unique is defined and memberof_overlay.stdout == "")| default(False))

- name: overlay | refint
  block:
    - name: overlay | render template refint.ldif
      template:
        src: "{{ overlay_path }}/refint.ldif.j2"
        dest: "{{ tmp_dir }}/refint-overlay.ldif"
    - name: overlay | add refint overlay to openldap
      command: "ldapadd -Q -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/refint-overlay.ldif"
  when: (rewrite_ldap or install_ldap or (unique is defined and refint_overlay.stdout == "")| default(False))

- name: overlay | auditlog
  block:
    - name: overlay | create auditlog db folder
      file: path="/var/log/openldap" state=directory owner=openldap group=openldap mode=u=rwX,g=rX,o= recurse=yes
    - name: overlay | render template auditlog.ldif
      template:
        src: "{{ overlay_path }}/auditlog.ldif.j2"
        dest: "{{ tmp_dir }}/auditlog-overlay.ldif"
    - name: overlay | add refint overlay to openldap
      command: "ldapadd -Q -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/auditlog-overlay.ldif"
  when: (rewrite_ldap or install_ldap or (unique is defined and auditlog_overlay.stdout == "")| default(False))

- name: overlay | ppolicy
  block:
    - name: overlay | enable password policy schema
      command: "ldapadd -Y EXTERNAL -H ldapi:/// -f /etc/ldap/schema/ppolicy.ldif"
    - name: overlay | render template ppolicy.ldif
      template:
        src: "{{ overlay_path }}/ppolicy.ldif.j2"
        dest: "{{ tmp_dir }}/ppolicy.ldif"
    - name: overlay | render template ppolicy-def.ldif
      template:
        src: "{{ overlay_path }}/ppolicy-def.ldif.j2"
        dest: "{{ tmp_dir }}/ppolicy-def.ldif"
    - name: overlay | add ppolicy overlay to openldap
      command: "ldapadd -Q -Y EXTERNAL -H ldapi:/// -f {{ tmp_dir }}/ppolicy.ldif"
    - name: overlay | add ppolicy entry to openldap
      command: "ldapadd -H ldap://localhost -D 'cn=admin,{{ ldap_basedc }}' -w {{ ldap_pw }} -f {{ tmp_dir }}/ppolicy-def.ldif"
  when: (rewrite_ldap or install_ldap or (unique is defined and ppolicy_overlay.stdout == "")| default(False))
